{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\n\n/**\n * Regular expressions to match inline code blocks enclosed in backticks.\n *  It matches:\n *     - An opening backtick, followed by\n *     - Any text that doesn't include a backtick (captured for marking), followed by\n *     - A closing backtick.\n *  This ensures that any text between backticks is formatted as code,\n *  regardless of the surrounding characters (exception being another backtick).\n */\nconst inputRegex = /(^|[^`])`([^`]+)`(?!`)/;\n/**\n * Matches inline code while pasting.\n */\nconst pasteRegex = /(^|[^`])`([^`]+)`(?!`)/g;\n/**\n * This extension allows you to mark text as inline code.\n * @see https://tiptap.dev/api/marks/code\n */\nconst Code = Mark.create({\n  name: 'code',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  excludes: '_',\n  code: true,\n  exitable: true,\n  parseHTML() {\n    return [{\n      tag: 'code'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setCode: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleCode: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetCode: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: pasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Code, Code as default, inputRegex, pasteRegex };","map":{"version":3,"names":["inputRegex","pasteRegex","Code","Mark","create","name","addOptions","HTMLAttributes","excludes","code","exitable","parseHTML","tag","renderHTML","mergeAttributes","options","addCommands","setCode","commands","setMark","toggleCode","toggleMark","unsetCode","unsetMark","addKeyboardShortcuts","Mod-e","editor","addInputRules","markInputRule","find","type","addPasteRules","markPasteRule"],"sources":["../src/code.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface CodeOptions {\n  /**\n   * The HTML attributes applied to the code element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    code: {\n      /**\n       * Set a code mark\n       */\n      setCode: () => ReturnType,\n      /**\n       * Toggle inline code\n       */\n      toggleCode: () => ReturnType,\n      /**\n       * Unset a code mark\n       */\n      unsetCode: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Regular expressions to match inline code blocks enclosed in backticks.\n *  It matches:\n *     - An opening backtick, followed by\n *     - Any text that doesn't include a backtick (captured for marking), followed by\n *     - A closing backtick.\n *  This ensures that any text between backticks is formatted as code,\n *  regardless of the surrounding characters (exception being another backtick).\n */\nexport const inputRegex = /(^|[^`])`([^`]+)`(?!`)/\n\n/**\n * Matches inline code while pasting.\n */\nexport const pasteRegex = /(^|[^`])`([^`]+)`(?!`)/g\n\n/**\n * This extension allows you to mark text as inline code.\n * @see https://tiptap.dev/api/marks/code\n */\nexport const Code = Mark.create<CodeOptions>({\n  name: 'code',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  excludes: '_',\n\n  code: true,\n\n  exitable: true,\n\n  parseHTML() {\n    return [\n      { tag: 'code' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setCode: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleCode: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetCode: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-e': () => this.editor.commands.toggleCode(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: pasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"mappings":";;AAmCA;;;;;;;;AAQG;AACI,MAAMA,UAAU,GAAG;AAE1B;;AAEG;AACI,MAAMC,UAAU,GAAG;AAE1B;;;AAGG;AACU,MAAAC,IAAI,GAAGC,IAAI,CAACC,MAAM,CAAc;EAC3CC,IAAI,EAAE,MAAM;EAEZC,UAAUA,CAAA;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,QAAQ,EAAE,GAAG;EAEbC,IAAI,EAAE,IAAI;EAEVC,QAAQ,EAAE,IAAI;EAEdC,SAASA,CAAA;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAM,CAAE,CAChB;GACF;EAEDC,UAAUA,CAAC;IAAEN;EAAc,CAAE;IAC3B,OAAO,CAAC,MAAM,EAAEO,eAAe,CAAC,IAAI,CAACC,OAAO,CAACR,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACjF;EAEDS,WAAWA,CAAA;IACT,OAAO;MACLC,OAAO,EAAEA,CAAA,KAAM,CAAC;QAAEC;MAAQ,CAAE,KAAI;QAC9B,OAAOA,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACd,IAAI,CAAC;OACnC;MACDe,UAAU,EAAEA,CAAA,KAAM,CAAC;QAAEF;MAAQ,CAAE,KAAI;QACjC,OAAOA,QAAQ,CAACG,UAAU,CAAC,IAAI,CAAChB,IAAI,CAAC;OACtC;MACDiB,SAAS,EAAEA,CAAA,KAAM,CAAC;QAAEJ;MAAQ,CAAE,KAAI;QAChC,OAAOA,QAAQ,CAACK,SAAS,CAAC,IAAI,CAAClB,IAAI,CAAC;;KAEvC;GACF;EAEDmB,oBAAoBA,CAAA;IAClB,OAAO;MACL,OAAO,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACR,QAAQ,CAACE,UAAU;KAC/C;GACF;EAEDO,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAE7B,UAAU;MAChB8B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDC,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZH,IAAI,EAAE5B,UAAU;MAChB6B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}