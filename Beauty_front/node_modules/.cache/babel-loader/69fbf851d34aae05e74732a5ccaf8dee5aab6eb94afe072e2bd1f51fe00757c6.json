{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ElMessage } from \"element-plus\";\nimport { useTokenStore } from \"@/stores/token\";\nimport router from \"@/router\";\nconst baseURL = '/api';\nconst instance = axios.create({\n  baseURL\n});\n\n// 请求拦截器\ninstance.interceptors.request.use(config => {\n  const tokenStore = useTokenStore();\n  if (tokenStore.token) {\n    config.headers.Authorization = tokenStore.token;\n  } else {\n    console.warn('⚠️ 请求时 token 为空');\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截器\ninstance.interceptors.response.use(res => {\n  if (res.data.code === 0) {\n    return res.data;\n  }\n  ElMessage.error(res.data.msg || '服务异常');\n  return Promise.reject(res.data);\n}, error => {\n  const status = error.response?.status;\n  const tokenStore = useTokenStore();\n  if (status === 401) {\n    ElMessage.error('尚未登录，请登录');\n\n    // 清空token\n    tokenStore.removeToken();\n\n    // 避免多次跳转\n    if (router.currentRoute.value.path !== '/login') {\n      router.push('/login');\n    }\n  } else if (status === 500) {\n    ElMessage.error('服务器内部错误，请稍后重试');\n  } else if (status === 404) {\n    ElMessage.error('请求接口不存在');\n  } else {\n    ElMessage.error(error.message || '请求失败');\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","ElMessage","useTokenStore","router","baseURL","instance","create","interceptors","request","use","config","tokenStore","token","headers","Authorization","console","warn","error","Promise","reject","response","res","data","code","msg","status","removeToken","currentRoute","value","path","push","message"],"sources":["C:/Users/32561/Desktop/毕设仓库/beauty-front/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport {ElMessage} from \"element-plus\";\r\nimport {useTokenStore} from \"@/stores/token\";\r\n\r\nimport router from \"@/router\";\r\n\r\nconst baseURL = '/api'\r\n\r\nconst instance = axios.create({baseURL})\r\n\r\n// 请求拦截器\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        const tokenStore = useTokenStore()\r\n\r\n\r\n        if (tokenStore.token) {\r\n            config.headers.Authorization = tokenStore.token\r\n        } else {\r\n            console.warn('⚠️ 请求时 token 为空')\r\n        }\r\n\r\n        return config\r\n    },\r\n    error => Promise.reject(error)\r\n)\r\n\r\n// 响应拦截器\r\ninstance.interceptors.response.use(\r\n    res => {\r\n        if (res.data.code === 0) {\r\n            return res.data\r\n        }\r\n        ElMessage.error(res.data.msg || '服务异常')\r\n        return Promise.reject(res.data)\r\n    },\r\n    error => {\r\n        const status = error.response?.status\r\n        const tokenStore = useTokenStore()\r\n\r\n        if (status === 401) {\r\n            ElMessage.error('尚未登录，请登录')\r\n\r\n            // 清空token\r\n            tokenStore.removeToken()\r\n\r\n            // 避免多次跳转\r\n            if (router.currentRoute.value.path !== '/login') {\r\n                router.push('/login')\r\n            }\r\n\r\n        } else if (status === 500) {\r\n            ElMessage.error('服务器内部错误，请稍后重试')\r\n        } else if (status === 404) {\r\n            ElMessage.error('请求接口不存在')\r\n        } else {\r\n            ElMessage.error(error.message || '请求失败')\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default instance\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,aAAa,QAAO,gBAAgB;AAE5C,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAG,MAAM;AAEtB,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;EAACF;AAAO,CAAC,CAAC;;AAExC;AACAC,QAAQ,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,MAAMC,UAAU,GAAGT,aAAa,CAAC,CAAC;EAGlC,IAAIS,UAAU,CAACC,KAAK,EAAE;IAClBF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGH,UAAU,CAACC,KAAK;EACnD,CAAC,MAAM;IACHG,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;EACnC;EAEA,OAAON,MAAM;AACjB,CAAC,EACDO,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAZ,QAAQ,CAACE,YAAY,CAACa,QAAQ,CAACX,GAAG,CAC9BY,GAAG,IAAI;EACH,IAAIA,GAAG,CAACC,IAAI,CAACC,IAAI,KAAK,CAAC,EAAE;IACrB,OAAOF,GAAG,CAACC,IAAI;EACnB;EACArB,SAAS,CAACgB,KAAK,CAACI,GAAG,CAACC,IAAI,CAACE,GAAG,IAAI,MAAM,CAAC;EACvC,OAAON,OAAO,CAACC,MAAM,CAACE,GAAG,CAACC,IAAI,CAAC;AACnC,CAAC,EACDL,KAAK,IAAI;EACL,MAAMQ,MAAM,GAAGR,KAAK,CAACG,QAAQ,EAAEK,MAAM;EACrC,MAAMd,UAAU,GAAGT,aAAa,CAAC,CAAC;EAElC,IAAIuB,MAAM,KAAK,GAAG,EAAE;IAChBxB,SAAS,CAACgB,KAAK,CAAC,UAAU,CAAC;;IAE3B;IACAN,UAAU,CAACe,WAAW,CAAC,CAAC;;IAExB;IACA,IAAIvB,MAAM,CAACwB,YAAY,CAACC,KAAK,CAACC,IAAI,KAAK,QAAQ,EAAE;MAC7C1B,MAAM,CAAC2B,IAAI,CAAC,QAAQ,CAAC;IACzB;EAEJ,CAAC,MAAM,IAAIL,MAAM,KAAK,GAAG,EAAE;IACvBxB,SAAS,CAACgB,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC,MAAM,IAAIQ,MAAM,KAAK,GAAG,EAAE;IACvBxB,SAAS,CAACgB,KAAK,CAAC,SAAS,CAAC;EAC9B,CAAC,MAAM;IACHhB,SAAS,CAACgB,KAAK,CAACA,KAAK,CAACc,OAAO,IAAI,MAAM,CAAC;EAC5C;EACA,OAAOb,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeZ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}