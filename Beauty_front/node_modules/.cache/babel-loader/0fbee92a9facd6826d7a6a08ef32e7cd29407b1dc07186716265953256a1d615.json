{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\n\n/**\n * Matches a blockquote to a `>` as input.\n */\nconst inputRegex = /^\\s*>\\s$/;\n/**\n * This extension allows you to create blockquotes.\n * @see https://tiptap.dev/api/nodes/blockquote\n */\nconst Blockquote = Node.create({\n  name: 'blockquote',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  content: 'block+',\n  group: 'block',\n  defining: true,\n  parseHTML() {\n    return [{\n      tag: 'blockquote'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setBlockquote: () => ({\n        commands\n      }) => {\n        return commands.wrapIn(this.name);\n      },\n      toggleBlockquote: () => ({\n        commands\n      }) => {\n        return commands.toggleWrap(this.name);\n      },\n      unsetBlockquote: () => ({\n        commands\n      }) => {\n        return commands.lift(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote()\n    };\n  },\n  addInputRules() {\n    return [wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Blockquote, Blockquote as default, inputRegex };","map":{"version":3,"names":["inputRegex","Blockquote","Node","create","name","addOptions","HTMLAttributes","content","group","defining","parseHTML","tag","renderHTML","mergeAttributes","options","addCommands","setBlockquote","commands","wrapIn","toggleBlockquote","toggleWrap","unsetBlockquote","lift","addKeyboardShortcuts","Mod-Shift-b","editor","addInputRules","wrappingInputRule","find","type"],"sources":["../src/blockquote.ts"],"sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nexport interface BlockquoteOptions {\n  /**\n   * HTML attributes to add to the blockquote element\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    blockQuote: {\n      /**\n       * Set a blockquote node\n       */\n      setBlockquote: () => ReturnType,\n      /**\n       * Toggle a blockquote node\n       */\n      toggleBlockquote: () => ReturnType,\n      /**\n       * Unset a blockquote node\n       */\n      unsetBlockquote: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches a blockquote to a `>` as input.\n */\nexport const inputRegex = /^\\s*>\\s$/\n\n/**\n * This extension allows you to create blockquotes.\n * @see https://tiptap.dev/api/nodes/blockquote\n */\nexport const Blockquote = Node.create<BlockquoteOptions>({\n\n  name: 'blockquote',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  content: 'block+',\n\n  group: 'block',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      { tag: 'blockquote' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setBlockquote: () => ({ commands }) => {\n        return commands.wrapIn(this.name)\n      },\n      toggleBlockquote: () => ({ commands }) => {\n        return commands.toggleWrap(this.name)\n      },\n      unsetBlockquote: () => ({ commands }) => {\n        return commands.lift(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"mappings":";;AA8BA;;AAEG;AACI,MAAMA,UAAU,GAAG;AAE1B;;;AAGG;AACU,MAAAC,UAAU,GAAGC,IAAI,CAACC,MAAM,CAAoB;EAEvDC,IAAI,EAAE,YAAY;EAElBC,UAAUA,CAAA;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,OAAO,EAAE,QAAQ;EAEjBC,KAAK,EAAE,OAAO;EAEdC,QAAQ,EAAE,IAAI;EAEdC,SAASA,CAAA;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAY,CAAE,CACtB;GACF;EAEDC,UAAUA,CAAC;IAAEN;EAAc,CAAE;IAC3B,OAAO,CAAC,YAAY,EAAEO,eAAe,CAAC,IAAI,CAACC,OAAO,CAACR,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GACvF;EAEDS,WAAWA,CAAA;IACT,OAAO;MACLC,aAAa,EAAEA,CAAA,KAAM,CAAC;QAAEC;MAAQ,CAAE,KAAI;QACpC,OAAOA,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACd,IAAI,CAAC;OAClC;MACDe,gBAAgB,EAAEA,CAAA,KAAM,CAAC;QAAEF;MAAQ,CAAE,KAAI;QACvC,OAAOA,QAAQ,CAACG,UAAU,CAAC,IAAI,CAAChB,IAAI,CAAC;OACtC;MACDiB,eAAe,EAAEA,CAAA,KAAM,CAAC;QAAEJ;MAAQ,CAAE,KAAI;QACtC,OAAOA,QAAQ,CAACK,IAAI,CAAC,IAAI,CAAClB,IAAI,CAAC;;KAElC;GACF;EAEDmB,oBAAoBA,CAAA;IAClB,OAAO;MACL,aAAa,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACR,QAAQ,CAACE,gBAAgB;KAC3D;GACF;EAEDO,aAAaA,CAAA;IACX,OAAO,CACLC,iBAAiB,CAAC;MAChBC,IAAI,EAAE5B,UAAU;MAChB6B,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}