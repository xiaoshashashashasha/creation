{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nconst DEFAULT_TIMEOUT = 6e4;\nfunction defaultSerialize(i) {\n  return i;\n}\nconst defaultDeserialize = defaultSerialize;\nconst {\n  clearTimeout,\n  setTimeout\n} = globalThis;\nconst random = Math.random.bind(Math);\nfunction createBirpc(functions, options) {\n  const {\n    post,\n    on,\n    off = () => {},\n    eventNames = [],\n    serialize = defaultSerialize,\n    deserialize = defaultDeserialize,\n    resolver,\n    bind = \"rpc\",\n    timeout = DEFAULT_TIMEOUT\n  } = options;\n  const rpcPromiseMap = /* @__PURE__ */new Map();\n  let _promise;\n  let closed = false;\n  const rpc = new Proxy({}, {\n    get(_, method) {\n      if (method === \"$functions\") return functions;\n      if (method === \"$close\") return close;\n      if (method === \"then\" && !eventNames.includes(\"then\") && !(\"then\" in functions)) return void 0;\n      const sendEvent = (...args) => {\n        post(serialize({\n          m: method,\n          a: args,\n          t: \"q\"\n        }));\n      };\n      if (eventNames.includes(method)) {\n        sendEvent.asEvent = sendEvent;\n        return sendEvent;\n      }\n      const sendCall = async (...args) => {\n        if (closed) throw new Error(`[birpc] rpc is closed, cannot call \"${method}\"`);\n        if (_promise) {\n          try {\n            await _promise;\n          } finally {\n            _promise = void 0;\n          }\n        }\n        return new Promise((resolve, reject) => {\n          const id = nanoid();\n          let timeoutId;\n          if (timeout >= 0) {\n            timeoutId = setTimeout(() => {\n              try {\n                options.onTimeoutError?.(method, args);\n                throw new Error(`[birpc] timeout on calling \"${method}\"`);\n              } catch (e) {\n                reject(e);\n              }\n              rpcPromiseMap.delete(id);\n            }, timeout);\n            if (typeof timeoutId === \"object\") timeoutId = timeoutId.unref?.();\n          }\n          rpcPromiseMap.set(id, {\n            resolve,\n            reject,\n            timeoutId,\n            method\n          });\n          post(serialize({\n            m: method,\n            a: args,\n            i: id,\n            t: \"q\"\n          }));\n        });\n      };\n      sendCall.asEvent = sendEvent;\n      return sendCall;\n    }\n  });\n  function close() {\n    closed = true;\n    rpcPromiseMap.forEach(({\n      reject,\n      method\n    }) => {\n      reject(new Error(`[birpc] rpc is closed, cannot call \"${method}\"`));\n    });\n    rpcPromiseMap.clear();\n    off(onMessage);\n  }\n  async function onMessage(data, ...extra) {\n    const msg = deserialize(data);\n    if (msg.t === \"q\") {\n      const {\n        m: method,\n        a: args\n      } = msg;\n      let result, error;\n      const fn = resolver ? resolver(method, functions[method]) : functions[method];\n      if (!fn) {\n        error = new Error(`[birpc] function \"${method}\" not found`);\n      } else {\n        try {\n          result = await fn.apply(bind === \"rpc\" ? rpc : functions, args);\n        } catch (e) {\n          error = e;\n        }\n      }\n      if (msg.i) {\n        if (error && options.onError) options.onError(error, method, args);\n        post(serialize({\n          t: \"s\",\n          i: msg.i,\n          r: result,\n          e: error\n        }), ...extra);\n      }\n    } else {\n      const {\n        i: ack,\n        r: result,\n        e: error\n      } = msg;\n      const promise = rpcPromiseMap.get(ack);\n      if (promise) {\n        clearTimeout(promise.timeoutId);\n        if (error) promise.reject(error);else promise.resolve(result);\n      }\n      rpcPromiseMap.delete(ack);\n    }\n  }\n  _promise = on(onMessage);\n  return rpc;\n}\nconst cacheMap = /* @__PURE__ */new WeakMap();\nfunction cachedMap(items, fn) {\n  return items.map(i => {\n    let r = cacheMap.get(i);\n    if (!r) {\n      r = fn(i);\n      cacheMap.set(i, r);\n    }\n    return r;\n  });\n}\nfunction createBirpcGroup(functions, channels, options = {}) {\n  const getChannels = () => typeof channels === \"function\" ? channels() : channels;\n  const getClients = (channels2 = getChannels()) => cachedMap(channels2, s => createBirpc(functions, {\n    ...options,\n    ...s\n  }));\n  const broadcastProxy = new Proxy({}, {\n    get(_, method) {\n      const client = getClients();\n      const callbacks = client.map(c => c[method]);\n      const sendCall = (...args) => {\n        return Promise.all(callbacks.map(i => i(...args)));\n      };\n      sendCall.asEvent = (...args) => {\n        callbacks.map(i => i.asEvent(...args));\n      };\n      return sendCall;\n    }\n  });\n  function updateChannels(fn) {\n    const channels2 = getChannels();\n    fn?.(channels2);\n    return getClients(channels2);\n  }\n  getClients();\n  return {\n    get clients() {\n      return getClients();\n    },\n    functions,\n    updateChannels,\n    broadcast: broadcastProxy,\n    /**\n     * @deprecated use `broadcast`\n     */\n    // @ts-expect-error deprecated\n    boardcast: broadcastProxy\n  };\n}\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nfunction nanoid(size = 21) {\n  let id = \"\";\n  let i = size;\n  while (i--) id += urlAlphabet[random() * 64 | 0];\n  return id;\n}\nexport { DEFAULT_TIMEOUT, cachedMap, createBirpc, createBirpcGroup };","map":{"version":3,"names":["DEFAULT_TIMEOUT","defaultSerialize","i","defaultDeserialize","clearTimeout","setTimeout","globalThis","random","Math","bind","createBirpc","functions","options","post","on","off","eventNames","serialize","deserialize","resolver","timeout","rpcPromiseMap","Map","_promise","closed","rpc","Proxy","get","_","method","close","includes","sendEvent","args","m","a","t","asEvent","sendCall","Error","Promise","resolve","reject","id","nanoid","timeoutId","onTimeoutError","e","delete","unref","set","forEach","clear","onMessage","data","extra","msg","result","error","fn","apply","onError","r","ack","promise","cacheMap","WeakMap","cachedMap","items","map","createBirpcGroup","channels","getChannels","getClients","channels2","s","broadcastProxy","client","callbacks","c","all","updateChannels","clients","broadcast","boardcast","urlAlphabet","size"],"sources":["C:/Users/32561/Desktop/毕设仓库/beauty-front/node_modules/birpc/dist/index.mjs"],"sourcesContent":["const DEFAULT_TIMEOUT = 6e4;\nfunction defaultSerialize(i) {\n  return i;\n}\nconst defaultDeserialize = defaultSerialize;\nconst { clearTimeout, setTimeout } = globalThis;\nconst random = Math.random.bind(Math);\nfunction createBirpc(functions, options) {\n  const {\n    post,\n    on,\n    off = () => {\n    },\n    eventNames = [],\n    serialize = defaultSerialize,\n    deserialize = defaultDeserialize,\n    resolver,\n    bind = \"rpc\",\n    timeout = DEFAULT_TIMEOUT\n  } = options;\n  const rpcPromiseMap = /* @__PURE__ */ new Map();\n  let _promise;\n  let closed = false;\n  const rpc = new Proxy({}, {\n    get(_, method) {\n      if (method === \"$functions\")\n        return functions;\n      if (method === \"$close\")\n        return close;\n      if (method === \"then\" && !eventNames.includes(\"then\") && !(\"then\" in functions))\n        return void 0;\n      const sendEvent = (...args) => {\n        post(serialize({ m: method, a: args, t: \"q\" }));\n      };\n      if (eventNames.includes(method)) {\n        sendEvent.asEvent = sendEvent;\n        return sendEvent;\n      }\n      const sendCall = async (...args) => {\n        if (closed)\n          throw new Error(`[birpc] rpc is closed, cannot call \"${method}\"`);\n        if (_promise) {\n          try {\n            await _promise;\n          } finally {\n            _promise = void 0;\n          }\n        }\n        return new Promise((resolve, reject) => {\n          const id = nanoid();\n          let timeoutId;\n          if (timeout >= 0) {\n            timeoutId = setTimeout(() => {\n              try {\n                options.onTimeoutError?.(method, args);\n                throw new Error(`[birpc] timeout on calling \"${method}\"`);\n              } catch (e) {\n                reject(e);\n              }\n              rpcPromiseMap.delete(id);\n            }, timeout);\n            if (typeof timeoutId === \"object\")\n              timeoutId = timeoutId.unref?.();\n          }\n          rpcPromiseMap.set(id, { resolve, reject, timeoutId, method });\n          post(serialize({ m: method, a: args, i: id, t: \"q\" }));\n        });\n      };\n      sendCall.asEvent = sendEvent;\n      return sendCall;\n    }\n  });\n  function close() {\n    closed = true;\n    rpcPromiseMap.forEach(({ reject, method }) => {\n      reject(new Error(`[birpc] rpc is closed, cannot call \"${method}\"`));\n    });\n    rpcPromiseMap.clear();\n    off(onMessage);\n  }\n  async function onMessage(data, ...extra) {\n    const msg = deserialize(data);\n    if (msg.t === \"q\") {\n      const { m: method, a: args } = msg;\n      let result, error;\n      const fn = resolver ? resolver(method, functions[method]) : functions[method];\n      if (!fn) {\n        error = new Error(`[birpc] function \"${method}\" not found`);\n      } else {\n        try {\n          result = await fn.apply(bind === \"rpc\" ? rpc : functions, args);\n        } catch (e) {\n          error = e;\n        }\n      }\n      if (msg.i) {\n        if (error && options.onError)\n          options.onError(error, method, args);\n        post(serialize({ t: \"s\", i: msg.i, r: result, e: error }), ...extra);\n      }\n    } else {\n      const { i: ack, r: result, e: error } = msg;\n      const promise = rpcPromiseMap.get(ack);\n      if (promise) {\n        clearTimeout(promise.timeoutId);\n        if (error)\n          promise.reject(error);\n        else\n          promise.resolve(result);\n      }\n      rpcPromiseMap.delete(ack);\n    }\n  }\n  _promise = on(onMessage);\n  return rpc;\n}\nconst cacheMap = /* @__PURE__ */ new WeakMap();\nfunction cachedMap(items, fn) {\n  return items.map((i) => {\n    let r = cacheMap.get(i);\n    if (!r) {\n      r = fn(i);\n      cacheMap.set(i, r);\n    }\n    return r;\n  });\n}\nfunction createBirpcGroup(functions, channels, options = {}) {\n  const getChannels = () => typeof channels === \"function\" ? channels() : channels;\n  const getClients = (channels2 = getChannels()) => cachedMap(channels2, (s) => createBirpc(functions, { ...options, ...s }));\n  const broadcastProxy = new Proxy({}, {\n    get(_, method) {\n      const client = getClients();\n      const callbacks = client.map((c) => c[method]);\n      const sendCall = (...args) => {\n        return Promise.all(callbacks.map((i) => i(...args)));\n      };\n      sendCall.asEvent = (...args) => {\n        callbacks.map((i) => i.asEvent(...args));\n      };\n      return sendCall;\n    }\n  });\n  function updateChannels(fn) {\n    const channels2 = getChannels();\n    fn?.(channels2);\n    return getClients(channels2);\n  }\n  getClients();\n  return {\n    get clients() {\n      return getClients();\n    },\n    functions,\n    updateChannels,\n    broadcast: broadcastProxy,\n    /**\n     * @deprecated use `broadcast`\n     */\n    // @ts-expect-error deprecated\n    boardcast: broadcastProxy\n  };\n}\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nfunction nanoid(size = 21) {\n  let id = \"\";\n  let i = size;\n  while (i--)\n    id += urlAlphabet[random() * 64 | 0];\n  return id;\n}\n\nexport { DEFAULT_TIMEOUT, cachedMap, createBirpc, createBirpcGroup };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}