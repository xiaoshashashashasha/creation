{"ast":null,"code":"import { Extension, callOrReturn, getExtensionField } from '@tiptap/core';\nimport { gapCursor } from '@tiptap/pm/gapcursor';\n\n/**\n * This extension allows you to add a gap cursor to your editor.\n * A gap cursor is a cursor that appears when you click on a place\n * where no content is present, for example inbetween nodes.\n * @see https://tiptap.dev/api/extensions/gapcursor\n */\nconst Gapcursor = Extension.create({\n  name: 'gapCursor',\n  addProseMirrorPlugins() {\n    return [gapCursor()];\n  },\n  extendNodeSchema(extension) {\n    var _a;\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    return {\n      allowGapCursor: (_a = callOrReturn(getExtensionField(extension, 'allowGapCursor', context))) !== null && _a !== void 0 ? _a : null\n    };\n  }\n});\nexport { Gapcursor, Gapcursor as default };","map":{"version":3,"names":["Gapcursor","Extension","create","name","addProseMirrorPlugins","gapCursor","extendNodeSchema","extension","context","options","storage","allowGapCursor","_a","callOrReturn","getExtensionField"],"sources":["../src/gapcursor.ts"],"sourcesContent":["import {\n  callOrReturn,\n  Extension,\n  getExtensionField,\n  ParentConfig,\n} from '@tiptap/core'\nimport { gapCursor } from '@tiptap/pm/gapcursor'\n\ndeclare module '@tiptap/core' {\n  interface NodeConfig<Options, Storage> {\n    /**\n     * A function to determine whether the gap cursor is allowed at the current position. Must return `true` or `false`.\n     * @default null\n     */\n    allowGapCursor?:\n      | boolean\n      | null\n      | ((this: {\n        name: string,\n        options: Options,\n        storage: Storage,\n        parent: ParentConfig<NodeConfig<Options>>['allowGapCursor'],\n      }) => boolean | null),\n  }\n}\n\n/**\n * This extension allows you to add a gap cursor to your editor.\n * A gap cursor is a cursor that appears when you click on a place\n * where no content is present, for example inbetween nodes.\n * @see https://tiptap.dev/api/extensions/gapcursor\n */\nexport const Gapcursor = Extension.create({\n  name: 'gapCursor',\n\n  addProseMirrorPlugins() {\n    return [\n      gapCursor(),\n    ]\n  },\n\n  extendNodeSchema(extension) {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    }\n\n    return {\n      allowGapCursor: callOrReturn(getExtensionField(extension, 'allowGapCursor', context)) ?? null,\n    }\n  },\n})\n"],"mappings":";;;AA0BA;;;;;AAKG;AACU,MAAAA,SAAS,GAAGC,SAAS,CAACC,MAAM,CAAC;EACxCC,IAAI,EAAE,WAAW;EAEjBC,qBAAqBA,CAAA;IACnB,OAAO,CACLC,SAAS,EAAE,CACZ;GACF;EAEDC,gBAAgBA,CAACC,SAAS;;IACxB,MAAMC,OAAO,GAAG;MACdL,IAAI,EAAEI,SAAS,CAACJ,IAAI;MACpBM,OAAO,EAAEF,SAAS,CAACE,OAAO;MAC1BC,OAAO,EAAEH,SAAS,CAACG;KACpB;IAED,OAAO;MACLC,cAAc,EAAE,CAAAC,EAAA,GAAAC,YAAY,CAACC,iBAAiB,CAACP,SAAS,EAAE,gBAAgB,EAAEC,OAAO,CAAC,CAAC,cAAAI,EAAA,cAAAA,EAAA,GAAI;KAC1F;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}