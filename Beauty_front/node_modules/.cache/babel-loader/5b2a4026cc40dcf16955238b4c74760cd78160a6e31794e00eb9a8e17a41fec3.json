{"ast":null,"code":"import { Node, mergeAttributes } from '@tiptap/core';\n\n/**\n * This extension allows you to create paragraphs.\n * @see https://www.tiptap.dev/api/nodes/paragraph\n */\nconst Paragraph = Node.create({\n  name: 'paragraph',\n  priority: 1000,\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  group: 'block',\n  content: 'inline*',\n  parseHTML() {\n    return [{\n      tag: 'p'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setParagraph: () => ({\n        commands\n      }) => {\n        return commands.setNode(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph()\n    };\n  }\n});\nexport { Paragraph, Paragraph as default };","map":{"version":3,"names":["Paragraph","Node","create","name","priority","addOptions","HTMLAttributes","group","content","parseHTML","tag","renderHTML","mergeAttributes","options","addCommands","setParagraph","commands","setNode","addKeyboardShortcuts","Mod-Alt-0","editor"],"sources":["../src/paragraph.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ParagraphOptions {\n  /**\n   * The HTML attributes for a paragraph node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    paragraph: {\n      /**\n       * Toggle a paragraph\n       * @example editor.commands.toggleParagraph()\n       */\n      setParagraph: () => ReturnType,\n    }\n  }\n}\n\n/**\n * This extension allows you to create paragraphs.\n * @see https://www.tiptap.dev/api/nodes/paragraph\n */\nexport const Paragraph = Node.create<ParagraphOptions>({\n  name: 'paragraph',\n\n  priority: 1000,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  group: 'block',\n\n  content: 'inline*',\n\n  parseHTML() {\n    return [\n      { tag: 'p' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setParagraph: () => ({ commands }) => {\n        return commands.setNode(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Alt-0': () => this.editor.commands.setParagraph(),\n    }\n  },\n})\n"],"mappings":";;AAuBA;;;AAGG;AACU,MAAAA,SAAS,GAAGC,IAAI,CAACC,MAAM,CAAmB;EACrDC,IAAI,EAAE,WAAW;EAEjBC,QAAQ,EAAE,IAAI;EAEdC,UAAUA,CAAA;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,KAAK,EAAE,OAAO;EAEdC,OAAO,EAAE,SAAS;EAElBC,SAASA,CAAA;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAG,CAAE,CACb;GACF;EAEDC,UAAUA,CAAC;IAAEL;EAAc,CAAE;IAC3B,OAAO,CAAC,GAAG,EAAEM,eAAe,CAAC,IAAI,CAACC,OAAO,CAACP,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC9E;EAEDQ,WAAWA,CAAA;IACT,OAAO;MACLC,YAAY,EAAEA,CAAA,KAAM,CAAC;QAAEC;MAAQ,CAAE,KAAI;QACnC,OAAOA,QAAQ,CAACC,OAAO,CAAC,IAAI,CAACd,IAAI,CAAC;;KAErC;GACF;EAEDe,oBAAoBA,CAAA;IAClB,OAAO;MACL,WAAW,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACJ,QAAQ,CAACD,YAAY;KACrD;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}