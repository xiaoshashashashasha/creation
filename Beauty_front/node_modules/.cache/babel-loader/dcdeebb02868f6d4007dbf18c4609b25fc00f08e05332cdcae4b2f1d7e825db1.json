{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, resolveDirective as _resolveDirective, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main-content\"\n};\nconst _hoisted_2 = {\n  class: \"message-page\"\n};\nconst _hoisted_3 = {\n  class: \"chat-list\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"chat-info\"\n};\nconst _hoisted_6 = {\n  class: \"chat-name\"\n};\nconst _hoisted_7 = [\"innerHTML\"];\nconst _hoisted_8 = {\n  key: 0,\n  class: \"chat-window\"\n};\nconst _hoisted_9 = {\n  class: \"chat-header\"\n};\nconst _hoisted_10 = {\n  class: \"chat-body\",\n  ref: \"chatBodyRef\"\n};\nconst _hoisted_11 = [\"innerHTML\"];\nconst _hoisted_12 = {\n  class: \"chat-time\"\n};\nconst _hoisted_13 = {\n  class: \"chat-input\"\n};\nconst _hoisted_14 = {\n  key: 1,\n  class: \"chat-window\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_avatar = _resolveComponent(\"el-avatar\");\n  const _component_el_badge = _resolveComponent(\"el-badge\");\n  const _directive_loading = _resolveDirective(\"loading\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    plain: \"\",\n    class: \"back-btn\",\n    onClick: $setup.goBack\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\" 返回 \")])),\n    _: 1 /* STABLE */\n  }), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.chatList, chat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: chat.target_id,\n      class: _normalizeClass([\"chat-item\", {\n        active: $setup.activeChat && $setup.activeChat.target_id === chat.target_id\n      }]),\n      onClick: $event => $setup.selectChat(chat)\n    }, [_createVNode(_component_el_avatar, {\n      src: chat.user_pic,\n      size: \"large\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(chat.nickname ? chat.nickname[0] : '?'), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"src\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(chat.nickname), 1 /* TEXT */), _createElementVNode(\"div\", {\n      class: \"chat-last\",\n      innerHTML: chat.lastMessage\n    }, null, 8 /* PROPS */, _hoisted_7)]), chat.unReadCount > 0 ? (_openBlock(), _createBlock(_component_el_badge, {\n      key: 0,\n      value: chat.unReadCount\n    }, null, 8 /* PROPS */, [\"value\"])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), $setup.activeChat ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, \" 与 \" + _toDisplayString($setup.activeChat.nickname) + \" 的聊天 \", 1 /* TEXT */), _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.message_id,\n      class: _normalizeClass([\"chat-message\", {\n        'me': msg.from_id === $setup.currentUser.user_id\n      }])\n    }, [_createElementVNode(\"div\", {\n      class: \"chat-content\",\n      innerHTML: msg.content\n    }, null, 8 /* PROPS */, _hoisted_11), _createElementVNode(\"div\", _hoisted_12, _toDisplayString(new Date(msg.created_at).toLocaleString()), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])), [[_directive_loading, $setup.loadingMessages]]), _createElementVNode(\"div\", _hoisted_13, [_createVNode($setup[\"RichTextEditor\"], {\n    modelValue: $setup.inputMessage,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.inputMessage = $event),\n    style: {\n      \"height\": \"200px\"\n    },\n    visible: true\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $setup.sendMsg,\n    style: {\n      \"height\": \"60px\",\n      \"margin-top\": \"10px\"\n    }\n  }, {\n    default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\"发送\")])),\n    _: 1 /* STABLE */\n  })])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_14, _cache[3] || (_cache[3] = [_createElementVNode(\"div\", {\n    class: \"chat-placeholder\"\n  }, \"请选择一个聊天\", -1 /* HOISTED */)])))])]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createVNode","_component_el_button","type","plain","onClick","$setup","goBack","default","_withCtx","_cache","_createTextVNode","_","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","chatList","chat","target_id","_normalizeClass","active","activeChat","$event","selectChat","_component_el_avatar","src","user_pic","size","_toDisplayString","nickname","_hoisted_5","_hoisted_6","innerHTML","lastMessage","_hoisted_7","unReadCount","_createBlock","_component_el_badge","value","_createCommentVNode","_hoisted_4","_hoisted_8","_hoisted_9","_hoisted_10","messages","msg","message_id","from_id","currentUser","user_id","content","_hoisted_11","_hoisted_12","Date","created_at","toLocaleString","loadingMessages","_hoisted_13","modelValue","inputMessage","style","visible","sendMsg","_hoisted_14"],"sources":["C:\\Users\\32561\\Desktop\\毕设仓库\\beauty-front\\src\\views\\Mine\\MyMessage.vue"],"sourcesContent":["<script setup>\r\nimport {ref, onMounted, nextTick, onUnmounted} from 'vue'\r\nimport { useRouter } from 'vue-router'\r\nimport {ElMessage} from 'element-plus'\r\nimport {getChatList, getHistory, sendMessage, setMessageRead} from '@/api/prMessage'\r\nimport {userOtherInfoService, userInfoService} from '@/api/user'\r\nimport RichTextEditor from \"@/components/RichTextEditor.vue\";\r\nimport { throttle } from 'lodash-es'\r\n\r\nconst chatList = ref([])\r\nconst activeChat = ref(null)\r\nconst messages = ref([])\r\nconst inputMessage = ref('')\r\nconst pageNum = ref(1)\r\nconst pageSize = ref(20)\r\nconst loadingMessages = ref(false)\r\nconst currentUser = ref({})\r\nconst chatBodyRef = ref(null)\r\n\r\nconst router = useRouter()\r\n\r\nconst goBack = () => {\r\n  router.back()\r\n}\r\n\r\n// 获取当前用户信息\r\nconst fetchCurrentUser = async () => {\r\n  try {\r\n    const res = await userInfoService()\r\n    if (res.data) {\r\n      currentUser.value = res.data  // 成功后赋值\r\n    }\r\n  } catch (err) {\r\n    if (err?.response?.status === 401) {\r\n      console.warn('[Chat] 用户未登录，跳过')\r\n    } else {\r\n      console.error('[Chat] 获取当前用户信息失败:', err)\r\n      ElMessage.error('无法获取当前登录信息')\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\nconst fetchChatList = async () => {\r\n  try {\r\n    const res = await getChatList()\r\n\r\n    if (res.code === 0) {\r\n      const list = res.data || []\r\n      // 批量补充头像昵称\r\n      for (const chat of list) {\r\n        try {\r\n          const userRes = await userOtherInfoService(chat.target_id)\r\n          if (userRes.data && userRes.code === 0) {\r\n            chat.nickname = userRes.data.nickname\r\n            chat.user_pic = userRes.data.user_pic\r\n          } else {\r\n            chat.nickname = '未知用户'\r\n            chat.user_pic = ''\r\n          }\r\n        } catch (err) {\r\n          console.error('拉取用户信息失败', err)\r\n          chat.nickname = '未知用户'\r\n          chat.user_pic = ''\r\n        }\r\n      }\r\n      chatList.value = list\r\n    } else {\r\n      console.error('后端返回失败:', res)\r\n      ElMessage.error(res.msg || '获取聊天列表失败')\r\n    }\r\n  } catch (err) {\r\n    console.error('请求异常:', err)\r\n    ElMessage.error('网络错误')\r\n  }\r\n}\r\n\r\n\r\n// 拉取聊天记录\r\nconst fetchMessages = async (append = false) => {\r\n  if (!activeChat.value) return\r\n  loadingMessages.value = true\r\n  try {\r\n    const res = await getHistory({\r\n      pageNum: pageNum.value,\r\n      pageSize: pageSize.value,\r\n      target_id: activeChat.value.target_id\r\n    })\r\n    if (res.code === 0) {\r\n      const list = res.data || []\r\n      if (list.length === 0 && append) {\r\n        noMoreMessages.value = true  // 加个flag标记到底了\r\n        return\r\n      }\r\n\r\n      if (append) {\r\n        // 加载更多时追加到最前面\r\n        messages.value = [...list.reverse(), ...messages.value]\r\n      } else {\r\n        // 正常首次拉取\r\n        messages.value = list.reverse()\r\n        await nextTick()\r\n        scrollToBottom()\r\n      }\r\n    } else {\r\n      ElMessage.error(res.msg || '拉取聊天记录失败')\r\n    }\r\n  } catch (err) {\r\n    console.error('请求聊天记录异常:', err)\r\n    ElMessage.error('获取消息失败')\r\n  } finally {\r\n    loadingMessages.value = false\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// 选择聊天对象\r\nconst selectChat = async (chat) => {\r\n  activeChat.value = chat\r\n  pageNum.value = 1 // 重新选择聊天对象时重置页码\r\n  messages.value = [] // 清空旧消息\r\n  await setMessageRead(chat.target_id)\r\n  await fetchMessages() // 拉第一页最新的消息\r\n  await fetchChatList()\r\n}\r\n\r\n\r\n\r\n// 发送消息\r\nconst sendMsg = async () => {\r\n  if (!inputMessage.value.trim() || !activeChat.value) return\r\n  try {\r\n    const content = inputMessage.value.trim()\r\n    await sendMessage({\r\n      to_id: activeChat.value.target_id,\r\n      content: content\r\n    })\r\n    inputMessage.value = ''\r\n\r\n    // 更新当前聊天窗口消息\r\n    await fetchMessages()\r\n\r\n    // 手动更新聊天列表最后一条消息\r\n    const now = new Date().toISOString().slice(0, 19).replace('T', ' ')  // 格式成 'yyyy-MM-dd HH:mm:ss'\r\n    activeChat.value.lastMessage = content\r\n    activeChat.value.lastTime = now\r\n\r\n    // 同步更新到chatList列表中\r\n    const chat = chatList.value.find(c => c.target_id === activeChat.value.target_id)\r\n    if (chat) {\r\n      chat.lastMessage = content\r\n      chat.lastTime = now\r\n\r\n      //把当前聊天置顶\r\n      chatList.value = [\r\n        chat,\r\n        ...chatList.value.filter(c => c.target_id !== chat.target_id)\r\n      ]\r\n    }\r\n\r\n    await nextTick()\r\n    scrollToBottom()\r\n\r\n  } catch (err) {\r\n    ElMessage.error('发送失败')\r\n  }\r\n}\r\n\r\n\r\n\r\n// 自动滚动到底\r\nconst scrollToBottom = () => {\r\n  if (chatBodyRef.value) {\r\n    chatBodyRef.value.scrollTop = chatBodyRef.value.scrollHeight\r\n  }\r\n}\r\n\r\nconst noMoreMessages = ref(false) // 没有更多了标记\r\n\r\nconst handleScroll = async () => {\r\n  if (!chatBodyRef.value) return;\r\n  const { scrollTop } = chatBodyRef.value;\r\n  const { scrollHeight, clientHeight } = chatBodyRef.value;\r\n\r\n  // 判断是否到顶 (scrollTop 小于等于 10)\r\n  if (scrollTop <= 10 && !loadingMessages.value && !noMoreMessages.value) {\r\n    console.log('到顶了，加载更多')\r\n    pageNum.value += 1\r\n    await fetchMessages(true)\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nonMounted(async () => {\r\n  await fetchCurrentUser()\r\n  await fetchChatList()\r\n\r\n  // 绑定滚动监听\r\n  nextTick(() => {\r\n    if (chatBodyRef.value) {\r\n      chatBodyRef.value.addEventListener('scroll', throttle(handleScroll, 300))\r\n    }\r\n  })\r\n})\r\n\r\nonUnmounted(() => {\r\n  if (chatBodyRef.value) {\r\n    chatBodyRef.value.removeEventListener('scroll', handleScroll)\r\n  }\r\n})\r\n\r\n</script>\r\n\r\n<template>\r\n  <div class=\"main-content\">\r\n    <el-button type=\"primary\" plain class=\"back-btn\" @click=\"goBack\">\r\n      返回\r\n    </el-button>\r\n    <div class=\"message-page\">\r\n      <div class=\"chat-list\">\r\n        <div\r\n            v-for=\"chat in chatList\"\r\n            :key=\"chat.target_id\"\r\n            class=\"chat-item\"\r\n            :class=\"{ active: activeChat && activeChat.target_id === chat.target_id }\"\r\n            @click=\"selectChat(chat)\"\r\n        >\r\n          <el-avatar :src=\"chat.user_pic\" size=\"large\">{{ chat.nickname ? chat.nickname[0] : '?' }}</el-avatar>\r\n          <div class=\"chat-info\">\r\n            <div class=\"chat-name\">{{ chat.nickname }}</div>\r\n            <div class=\"chat-last\" v-html=\"chat.lastMessage\"></div>\r\n          </div>\r\n          <el-badge :value=\"chat.unReadCount\" v-if=\"chat.unReadCount > 0\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"chat-window\" v-if=\"activeChat\">\r\n        <div class=\"chat-header\">\r\n          与 {{ activeChat.nickname }} 的聊天\r\n        </div>\r\n\r\n        <div class=\"chat-body\" ref=\"chatBodyRef\" v-loading=\"loadingMessages\">\r\n          <div v-for=\"msg in messages\" :key=\"msg.message_id\" class=\"chat-message\"\r\n               :class=\"{ 'me': msg.from_id === currentUser.user_id }\">\r\n            <div class=\"chat-content\" v-html=\"msg.content\"></div>\r\n            <div class=\"chat-time\">{{ new Date(msg.created_at).toLocaleString() }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"chat-input\">\r\n          <RichTextEditor\r\n              v-model=\"inputMessage\"\r\n              style=\"height: 200px\"\r\n              :visible=\"true\"\r\n          />\r\n          <el-button type=\"primary\" @click=\"sendMsg\" style=\"height: 60px ;margin-top: 10px;\">发送</el-button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"chat-window\" v-else>\r\n        <div class=\"chat-placeholder\">请选择一个聊天</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.main-content {\r\n  flex: 1;\r\n  width: 1720px;\r\n  margin: 0 auto;\r\n  background: #f5f7fa;\r\n}\r\n.message-page {\r\n  display: flex;\r\n  width: 1720px;\r\n  margin: 0 auto;\r\n  margin-bottom: 10px;\r\n  height: 86vh;\r\n  background: #f5f7fa;\r\n}\r\n\r\n.chat-list {\r\n  width: 300px;\r\n  background: white;\r\n  border-right: 1px solid #ddd;\r\n  overflow-y: auto;\r\n}\r\n\r\n.chat-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.3s, box-shadow 0.3s;\r\n}\r\n\r\n.chat-item:hover {\r\n  background: #f0faff;\r\n}\r\n\r\n.chat-item.active {\r\n  background: #e6f7ff;\r\n  box-shadow: inset 4px 0 0 #409eff; /* 左边一条蓝色高亮条 */\r\n}\r\n\r\n.chat-info {\r\n  margin-left: 10px;\r\n  flex: 1;\r\n  overflow: hidden;\r\n}\r\n\r\n.chat-name {\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.chat-last {\r\n  color: #999;\r\n  font-size: 12px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n\r\n.chat-window {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-header {\r\n  background: white;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #ddd;\r\n  font-weight: bold;\r\n}\r\n\r\n.chat-body {\r\n  flex: 1;\r\n  height: 0;\r\n  min-height: 100px;\r\n  max-height: calc(86vh - 160px);\r\n  overflow-y: auto;\r\n  padding: 15px;\r\n  background: #f9f9f9;\r\n}\r\n\r\n\r\n.chat-message {\r\n  margin-bottom: 10px;\r\n  max-width: 60%;\r\n  word-break: break-word;\r\n}\r\n\r\n.chat-message.me {\r\n  margin-left: auto;\r\n  text-align: right;\r\n}\r\n\r\n.chat-content {\r\n  display: inline-block;\r\n  background: #409eff;\r\n  color: white;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.chat-message.me .chat-content {\r\n  background: #67c23a;\r\n}\r\n\r\n.chat-time {\r\n  font-size: 10px;\r\n  color: #999;\r\n  margin-top: 5px;\r\n}\r\n\r\n.chat-input {\r\n  display: flex;\r\n  padding: 15px;\r\n  background: white;\r\n  border-top: 1px solid #ddd;\r\n}\r\n\r\n.chat-placeholder {\r\n  margin: auto;\r\n  font-size: 20px;\r\n  color: #ccc;\r\n}\r\n\r\n.back-btn {\r\n  margin: 5px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}