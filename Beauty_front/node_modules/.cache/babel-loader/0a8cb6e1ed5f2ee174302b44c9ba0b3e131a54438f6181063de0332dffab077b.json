{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ElMessage } from \"element-plus\";\nimport { useTokenStore } from \"@/stores/token\";\nimport router from \"@/router\";\nconst baseURL = '/api';\nconst instance = axios.create({\n  baseURL\n});\n\n// 请求拦截器\ninstance.interceptors.request.use(config => {\n  const tokenStore = useTokenStore();\n  if (tokenStore.token) {\n    config.headers.Authorization = tokenStore.token;\n    console.log('✅ 请求头 token 设置成功:', tokenStore.token);\n  } else {\n    console.warn('⚠️ 请求时 token 为空');\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 响应拦截器\ninstance.interceptors.response.use(result => {\n  if (result.data.code === 0) {\n    return result.data;\n  }\n  console.log(result.message);\n  ElMessage.error(result.message ? result.message : '服务异常');\n  return Promise.reject(result.data);\n}, error => {\n  const status = error.response?.status;\n  if (status === 500) {\n    ElMessage.error('服务器内部错误，请稍后重试');\n  } else if (status === 404) {\n    ElMessage.error('请求接口不存在');\n  } else if (status === 401) {\n    ElMessage.error('登录状态已过期，请重新登录');\n    router.push('/login');\n  } else {\n    ElMessage.error(error.message || '请求失败');\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","ElMessage","useTokenStore","router","baseURL","instance","create","interceptors","request","use","config","tokenStore","token","headers","Authorization","console","log","warn","error","Promise","reject","response","result","data","code","message","status","push"],"sources":["C:/Users/32561/Desktop/毕设仓库/beauty-front/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport {ElMessage} from \"element-plus\";\r\nimport {useTokenStore} from \"@/stores/token\";\r\n\r\nimport router from \"@/router\";\r\n\r\nconst baseURL = '/api'\r\n\r\nconst instance = axios.create({baseURL})\r\n\r\n// 请求拦截器\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        const tokenStore = useTokenStore()\r\n\r\n\r\n        if (tokenStore.token) {\r\n            config.headers.Authorization = tokenStore.token\r\n            console.log('✅ 请求头 token 设置成功:', tokenStore.token)\r\n        } else {\r\n            console.warn('⚠️ 请求时 token 为空')\r\n        }\r\n\r\n        return config\r\n    },\r\n    error => Promise.reject(error)\r\n)\r\n\r\n// 响应拦截器\r\ninstance.interceptors.response.use(\r\n    result => {\r\n        if (result.data.code === 0) {\r\n            return result.data\r\n        }\r\n        console.log(result.message)\r\n        ElMessage.error(result.message?result.message:'服务异常')\r\n        return Promise.reject(result.data)\r\n    },\r\n    error => {\r\n        const status = error.response?.status\r\n\r\n        if (status === 500) {\r\n            ElMessage.error('服务器内部错误，请稍后重试')\r\n        } else if (status === 404) {\r\n            ElMessage.error('请求接口不存在')\r\n        } else if (status === 401) {\r\n            ElMessage.error('登录状态已过期，请重新登录')\r\n            router.push('/login')\r\n        } else {\r\n            ElMessage.error(error.message || '请求失败')\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default instance\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,aAAa,QAAO,gBAAgB;AAE5C,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAG,MAAM;AAEtB,MAAMC,QAAQ,GAAGL,KAAK,CAACM,MAAM,CAAC;EAACF;AAAO,CAAC,CAAC;;AAExC;AACAC,QAAQ,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,MAAMC,UAAU,GAAGT,aAAa,CAAC,CAAC;EAGlC,IAAIS,UAAU,CAACC,KAAK,EAAE;IAClBF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGH,UAAU,CAACC,KAAK;IAC/CG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,UAAU,CAACC,KAAK,CAAC;EACtD,CAAC,MAAM;IACHG,OAAO,CAACE,IAAI,CAAC,iBAAiB,CAAC;EACnC;EAEA,OAAOP,MAAM;AACjB,CAAC,EACDQ,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAb,QAAQ,CAACE,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC9Ba,MAAM,IAAI;EACN,IAAIA,MAAM,CAACC,IAAI,CAACC,IAAI,KAAK,CAAC,EAAE;IACxB,OAAOF,MAAM,CAACC,IAAI;EACtB;EACAR,OAAO,CAACC,GAAG,CAACM,MAAM,CAACG,OAAO,CAAC;EAC3BxB,SAAS,CAACiB,KAAK,CAACI,MAAM,CAACG,OAAO,GAACH,MAAM,CAACG,OAAO,GAAC,MAAM,CAAC;EACrD,OAAON,OAAO,CAACC,MAAM,CAACE,MAAM,CAACC,IAAI,CAAC;AACtC,CAAC,EACDL,KAAK,IAAI;EACL,MAAMQ,MAAM,GAAGR,KAAK,CAACG,QAAQ,EAAEK,MAAM;EAErC,IAAIA,MAAM,KAAK,GAAG,EAAE;IAChBzB,SAAS,CAACiB,KAAK,CAAC,eAAe,CAAC;EACpC,CAAC,MAAM,IAAIQ,MAAM,KAAK,GAAG,EAAE;IACvBzB,SAAS,CAACiB,KAAK,CAAC,SAAS,CAAC;EAC9B,CAAC,MAAM,IAAIQ,MAAM,KAAK,GAAG,EAAE;IACvBzB,SAAS,CAACiB,KAAK,CAAC,eAAe,CAAC;IAChCf,MAAM,CAACwB,IAAI,CAAC,QAAQ,CAAC;EACzB,CAAC,MAAM;IACH1B,SAAS,CAACiB,KAAK,CAACA,KAAK,CAACO,OAAO,IAAI,MAAM,CAAC;EAC5C;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeb,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}