{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nconst ListItemName = 'listItem';\nconst TextStyleName = 'textStyle';\n/**\n * Matches an ordered list to a 1. on input (or any number followed by a dot).\n */\nconst inputRegex = /^(\\d+)\\.\\s$/;\n/**\n * This extension allows you to create ordered lists.\n * This requires the ListItem extension\n * @see https://www.tiptap.dev/api/nodes/ordered-list\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nconst OrderedList = Node.create({\n  name: 'orderedList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start') ? parseInt(element.getAttribute('start') || '', 10) : 1;\n        }\n      },\n      type: {\n        default: null,\n        parseHTML: element => element.getAttribute('type')\n      }\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'ol'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    const {\n      start,\n      ...attributesWithoutStart\n    } = HTMLAttributes;\n    return start === 1 ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0] : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({\n        commands,\n        chain\n      }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName)).run();\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList()\n    };\n  },\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({\n        start: +match[1]\n      }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1]\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({\n          start: +match[1],\n          ...this.editor.getAttributes(TextStyleName)\n        }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { OrderedList, OrderedList as default, inputRegex };","map":{"version":3,"names":["ListItemName","TextStyleName","inputRegex","OrderedList","Node","create","name","addOptions","itemTypeName","HTMLAttributes","keepMarks","keepAttributes","group","content","options","addAttributes","start","default","parseHTML","element","hasAttribute","parseInt","getAttribute","type","tag","renderHTML","attributesWithoutStart","mergeAttributes","addCommands","toggleOrderedList","commands","chain","toggleList","updateAttributes","editor","getAttributes","run","addKeyboardShortcuts","Mod-Shift-7","addInputRules","inputRule","wrappingInputRule","find","match","joinPredicate","node","childCount","attrs"],"sources":["../src/ordered-list.ts"],"sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nconst ListItemName = 'listItem'\nconst TextStyleName = 'textStyle'\n\nexport interface OrderedListOptions {\n  /**\n   * The node type name for list items.\n   * @default 'listItem'\n   * @example 'myListItem'\n   */\n  itemTypeName: string,\n\n  /**\n   * The HTML attributes for an ordered list node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n\n  /**\n   * Keep the marks when splitting a list item.\n   * @default false\n   * @example true\n   */\n  keepMarks: boolean,\n\n  /**\n   * Keep the attributes when splitting a list item.\n   * @default false\n   * @example true\n   */\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    orderedList: {\n      /**\n       * Toggle an ordered list\n       * @example editor.commands.toggleOrderedList()\n       */\n      toggleOrderedList: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches an ordered list to a 1. on input (or any number followed by a dot).\n */\nexport const inputRegex = /^(\\d+)\\.\\s$/\n\n/**\n * This extension allows you to create ordered lists.\n * This requires the ListItem extension\n * @see https://www.tiptap.dev/api/nodes/ordered-list\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nexport const OrderedList = Node.create<OrderedListOptions>({\n  name: 'orderedList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  addAttributes() {\n    return {\n      start: {\n        default: 1,\n        parseHTML: element => {\n          return element.hasAttribute('start')\n            ? parseInt(element.getAttribute('start') || '', 10)\n            : 1\n        },\n      },\n      type: {\n        default: null,\n        parseHTML: element => element.getAttribute('type'),\n      },\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'ol',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    return start === 1\n      ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n      : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleOrderedList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n      getAttributes: match => ({ start: +match[1] }),\n      joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyleName) }),\n        joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}