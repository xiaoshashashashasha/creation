{"ast":null,"code":"import { Mark, mergeAttributes, markInputRule, markPasteRule } from '@tiptap/core';\n\n/**\n * Matches an italic to a *italic* on input.\n */\nconst starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/;\n/**\n * Matches an italic to a *italic* on paste.\n */\nconst starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g;\n/**\n * Matches an italic to a _italic_ on input.\n */\nconst underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/;\n/**\n * Matches an italic to a _italic_ on paste.\n */\nconst underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g;\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nconst Italic = Mark.create({\n  name: 'italic',\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'em'\n    }, {\n      tag: 'i',\n      getAttrs: node => node.style.fontStyle !== 'normal' && null\n    }, {\n      style: 'font-style=normal',\n      clearMark: mark => mark.type.name === this.name\n    }, {\n      style: 'font-style=italic'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      setItalic: () => ({\n        commands\n      }) => {\n        return commands.setMark(this.name);\n      },\n      toggleItalic: () => ({\n        commands\n      }) => {\n        return commands.toggleMark(this.name);\n      },\n      unsetItalic: () => ({\n        commands\n      }) => {\n        return commands.unsetMark(this.name);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic()\n    };\n  },\n  addInputRules() {\n    return [markInputRule({\n      find: starInputRegex,\n      type: this.type\n    }), markInputRule({\n      find: underscoreInputRegex,\n      type: this.type\n    })];\n  },\n  addPasteRules() {\n    return [markPasteRule({\n      find: starPasteRegex,\n      type: this.type\n    }), markPasteRule({\n      find: underscorePasteRegex,\n      type: this.type\n    })];\n  }\n});\nexport { Italic, Italic as default, starInputRegex, starPasteRegex, underscoreInputRegex, underscorePasteRegex };","map":{"version":3,"names":["starInputRegex","starPasteRegex","underscoreInputRegex","underscorePasteRegex","Italic","Mark","create","name","addOptions","HTMLAttributes","parseHTML","tag","getAttrs","node","style","fontStyle","clearMark","mark","type","renderHTML","mergeAttributes","options","addCommands","setItalic","commands","setMark","toggleItalic","toggleMark","unsetItalic","unsetMark","addKeyboardShortcuts","Mod-i","editor","Mod-I","addInputRules","markInputRule","find","addPasteRules","markPasteRule"],"sources":["../src/italic.ts"],"sourcesContent":["import {\n  Mark,\n  markInputRule,\n  markPasteRule,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface ItalicOptions {\n  /**\n   * HTML attributes to add to the italic element.\n   * @default {}\n   * @example { class: 'foo' }\n  */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    italic: {\n      /**\n       * Set an italic mark\n       * @example editor.commands.setItalic()\n       */\n      setItalic: () => ReturnType,\n      /**\n       * Toggle an italic mark\n       * @example editor.commands.toggleItalic()\n       */\n      toggleItalic: () => ReturnType,\n      /**\n       * Unset an italic mark\n       * @example editor.commands.unsetItalic()\n       */\n      unsetItalic: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches an italic to a *italic* on input.\n */\nexport const starInputRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))$/\n\n/**\n * Matches an italic to a *italic* on paste.\n */\nexport const starPasteRegex = /(?:^|\\s)(\\*(?!\\s+\\*)((?:[^*]+))\\*(?!\\s+\\*))/g\n\n/**\n * Matches an italic to a _italic_ on input.\n */\nexport const underscoreInputRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))$/\n\n/**\n * Matches an italic to a _italic_ on paste.\n */\nexport const underscorePasteRegex = /(?:^|\\s)(_(?!\\s+_)((?:[^_]+))_(?!\\s+_))/g\n\n/**\n * This extension allows you to create italic text.\n * @see https://www.tiptap.dev/api/marks/italic\n */\nexport const Italic = Mark.create<ItalicOptions>({\n  name: 'italic',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'em',\n      },\n      {\n        tag: 'i',\n        getAttrs: node => (node as HTMLElement).style.fontStyle !== 'normal' && null,\n      },\n      {\n        style: 'font-style=normal',\n        clearMark: mark => mark.type.name === this.name,\n      },\n      {\n        style: 'font-style=italic',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['em', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setItalic: () => ({ commands }) => {\n        return commands.setMark(this.name)\n      },\n      toggleItalic: () => ({ commands }) => {\n        return commands.toggleMark(this.name)\n      },\n      unsetItalic: () => ({ commands }) => {\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-i': () => this.editor.commands.toggleItalic(),\n      'Mod-I': () => this.editor.commands.toggleItalic(),\n    }\n  },\n\n  addInputRules() {\n    return [\n      markInputRule({\n        find: starInputRegex,\n        type: this.type,\n      }),\n      markInputRule({\n        find: underscoreInputRegex,\n        type: this.type,\n      }),\n    ]\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: starPasteRegex,\n        type: this.type,\n      }),\n      markPasteRule({\n        find: underscorePasteRegex,\n        type: this.type,\n      }),\n    ]\n  },\n})\n"],"mappings":";;AAsCA;;AAEG;AACI,MAAMA,cAAc,GAAG;AAE9B;;AAEG;AACI,MAAMC,cAAc,GAAG;AAE9B;;AAEG;AACI,MAAMC,oBAAoB,GAAG;AAEpC;;AAEG;AACI,MAAMC,oBAAoB,GAAG;AAEpC;;;AAGG;AACU,MAAAC,MAAM,GAAGC,IAAI,CAACC,MAAM,CAAgB;EAC/CC,IAAI,EAAE,QAAQ;EAEdC,UAAUA,CAAA;IACR,OAAO;MACLC,cAAc,EAAE;KACjB;GACF;EAEDC,SAASA,CAAA;IACP,OAAO,CACL;MACEC,GAAG,EAAE;IACN,GACD;MACEA,GAAG,EAAE,GAAG;MACRC,QAAQ,EAAEC,IAAI,IAAKA,IAAoB,CAACC,KAAK,CAACC,SAAS,KAAK,QAAQ,IAAI;IACzE,GACD;MACED,KAAK,EAAE,mBAAmB;MAC1BE,SAAS,EAAEC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACX,IAAI,KAAK,IAAI,CAACA;IAC5C,GACD;MACEO,KAAK,EAAE;IACR,EACF;GACF;EAEDK,UAAUA,CAAC;IAAEV;EAAc,CAAE;IAC3B,OAAO,CAAC,IAAI,EAAEW,eAAe,CAAC,IAAI,CAACC,OAAO,CAACZ,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC/E;EAEDa,WAAWA,CAAA;IACT,OAAO;MACLC,SAAS,EAAEA,CAAA,KAAM,CAAC;QAAEC;MAAQ,CAAE,KAAI;QAChC,OAAOA,QAAQ,CAACC,OAAO,CAAC,IAAI,CAAClB,IAAI,CAAC;OACnC;MACDmB,YAAY,EAAEA,CAAA,KAAM,CAAC;QAAEF;MAAQ,CAAE,KAAI;QACnC,OAAOA,QAAQ,CAACG,UAAU,CAAC,IAAI,CAACpB,IAAI,CAAC;OACtC;MACDqB,WAAW,EAAEA,CAAA,KAAM,CAAC;QAAEJ;MAAQ,CAAE,KAAI;QAClC,OAAOA,QAAQ,CAACK,SAAS,CAAC,IAAI,CAACtB,IAAI,CAAC;;KAEvC;GACF;EAEDuB,oBAAoBA,CAAA;IAClB,OAAO;MACL,OAAO,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACR,QAAQ,CAACE,YAAY,EAAE;MAClD,OAAO,EAAEO,CAAA,KAAM,IAAI,CAACD,MAAM,CAACR,QAAQ,CAACE,YAAY;KACjD;GACF;EAEDQ,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZC,IAAI,EAAEpC,cAAc;MACpBkB,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFiB,aAAa,CAAC;MACZC,IAAI,EAAElC,oBAAoB;MAC1BgB,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;GACF;EAEDmB,aAAaA,CAAA;IACX,OAAO,CACLC,aAAa,CAAC;MACZF,IAAI,EAAEnC,cAAc;MACpBiB,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,EACFoB,aAAa,CAAC;MACZF,IAAI,EAAEjC,oBAAoB;MAC1Be,IAAI,EAAE,IAAI,CAACA;KACZ,CAAC,CACH;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}