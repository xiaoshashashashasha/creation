{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { Node, mergeAttributes } from '@tiptap/core';\n\n/**\n * This extension allows you to insert hard breaks.\n * @see https://www.tiptap.dev/api/nodes/hard-break\n */\nconst HardBreak = Node.create({\n  name: 'hardBreak',\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {}\n    };\n  },\n  inline: true,\n  group: 'inline',\n  selectable: false,\n  linebreakReplacement: true,\n  parseHTML() {\n    return [{\n      tag: 'br'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n  renderText() {\n    return '\\n';\n  },\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor\n      }) => {\n        return commands.first([() => commands.exitCode(), () => commands.command(() => {\n          const {\n            selection,\n            storedMarks\n          } = state;\n          if (selection.$from.parent.type.spec.isolating) {\n            return false;\n          }\n          const {\n            keepMarks\n          } = this.options;\n          const {\n            splittableMarks\n          } = editor.extensionManager;\n          const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n          return chain().insertContent({\n            type: this.name\n          }).command(({\n            tr,\n            dispatch\n          }) => {\n            if (dispatch && marks && keepMarks) {\n              const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n              tr.ensureMarks(filteredMarks);\n            }\n            return true;\n          }).run();\n        })]);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak()\n    };\n  }\n});\nexport { HardBreak, HardBreak as default };","map":{"version":3,"names":["HardBreak","Node","create","name","addOptions","keepMarks","HTMLAttributes","inline","group","selectable","linebreakReplacement","parseHTML","tag","renderHTML","mergeAttributes","options","renderText","addCommands","setHardBreak","commands","chain","state","editor","first","exitCode","command","selection","storedMarks","$from","parent","type","spec","isolating","splittableMarks","extensionManager","marks","$to","parentOffset","insertContent","tr","dispatch","filteredMarks","filter","mark","includes","ensureMarks","run","addKeyboardShortcuts","Mod-Enter","Shift-Enter"],"sources":["../src/hard-break.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface HardBreakOptions {\n  /**\n   * Controls if marks should be kept after being split by a hard break.\n   * @default true\n   * @example false\n   */\n  keepMarks: boolean,\n\n  /**\n   * HTML attributes to add to the hard break element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    hardBreak: {\n      /**\n       * Add a hard break\n       * @example editor.commands.setHardBreak()\n       */\n      setHardBreak: () => ReturnType,\n    }\n  }\n}\n\n/**\n * This extension allows you to insert hard breaks.\n * @see https://www.tiptap.dev/api/nodes/hard-break\n */\nexport const HardBreak = Node.create<HardBreakOptions>({\n  name: 'hardBreak',\n\n  addOptions() {\n    return {\n      keepMarks: true,\n      HTMLAttributes: {},\n    }\n  },\n\n  inline: true,\n\n  group: 'inline',\n\n  selectable: false,\n\n  linebreakReplacement: true,\n\n  parseHTML() {\n    return [\n      { tag: 'br' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)]\n  },\n\n  renderText() {\n    return '\\n'\n  },\n\n  addCommands() {\n    return {\n      setHardBreak: () => ({\n        commands,\n        chain,\n        state,\n        editor,\n      }) => {\n        return commands.first([\n          () => commands.exitCode(),\n          () => commands.command(() => {\n            const { selection, storedMarks } = state\n\n            if (selection.$from.parent.type.spec.isolating) {\n              return false\n            }\n\n            const { keepMarks } = this.options\n            const { splittableMarks } = editor.extensionManager\n            const marks = storedMarks\n              || (selection.$to.parentOffset && selection.$from.marks())\n\n            return chain()\n              .insertContent({ type: this.name })\n              .command(({ tr, dispatch }) => {\n                if (dispatch && marks && keepMarks) {\n                  const filteredMarks = marks\n                    .filter(mark => splittableMarks.includes(mark.type.name))\n\n                  tr.ensureMarks(filteredMarks)\n                }\n\n                return true\n              })\n              .run()\n          }),\n        ])\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Enter': () => this.editor.commands.setHardBreak(),\n      'Shift-Enter': () => this.editor.commands.setHardBreak(),\n    }\n  },\n})\n"],"mappings":";;;;AA8BA;;;AAGG;AACU,MAAAA,SAAS,GAAGC,IAAI,CAACC,MAAM,CAAmB;EACrDC,IAAI,EAAE,WAAW;EAEjBC,UAAUA,CAAA;IACR,OAAO;MACLC,SAAS,EAAE,IAAI;MACfC,cAAc,EAAE;KACjB;GACF;EAEDC,MAAM,EAAE,IAAI;EAEZC,KAAK,EAAE,QAAQ;EAEfC,UAAU,EAAE,KAAK;EAEjBC,oBAAoB,EAAE,IAAI;EAE1BC,SAASA,CAAA;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAI,CAAE,CACd;GACF;EAEDC,UAAUA,CAAC;IAAEP;EAAc,CAAE;IAC3B,OAAO,CAAC,IAAI,EAAEQ,eAAe,CAAC,IAAI,CAACC,OAAO,CAACT,cAAc,EAAEA,cAAc,CAAC,CAAC;GAC5E;EAEDU,UAAUA,CAAA;IACR,OAAO,IAAI;GACZ;EAEDC,WAAWA,CAAA;IACT,OAAO;MACLC,YAAY,EAAEA,CAAA,KAAM,CAAC;QACnBC,QAAQ;QACRC,KAAK;QACLC,KAAK;QACLC;MAAM,CACP,KAAI;QACH,OAAOH,QAAQ,CAACI,KAAK,CAAC,CACpB,MAAMJ,QAAQ,CAACK,QAAQ,EAAE,EACzB,MAAML,QAAQ,CAACM,OAAO,CAAC,MAAK;UAC1B,MAAM;YAAEC,SAAS;YAAEC;UAAW,CAAE,GAAGN,KAAK;UAExC,IAAIK,SAAS,CAACE,KAAK,CAACC,MAAM,CAACC,IAAI,CAACC,IAAI,CAACC,SAAS,EAAE;YAC9C,OAAO,KAAK;;UAGd,MAAM;YAAE3B;UAAS,CAAE,GAAG,IAAI,CAACU,OAAO;UAClC,MAAM;YAAEkB;UAAe,CAAE,GAAGX,MAAM,CAACY,gBAAgB;UACnD,MAAMC,KAAK,GAAGR,WAAA,IACRD,SAAS,CAACU,GAAG,CAACC,YAAY,IAAIX,SAAS,CAACE,KAAK,CAACO,KAAK,EAAG;UAE5D,OAAOf,KAAK,GACTkB,aAAa,CAAC;YAAER,IAAI,EAAE,IAAI,CAAC3B;UAAI,CAAE,EACjCsB,OAAO,CAAC,CAAC;YAAEc,EAAE;YAAEC;UAAQ,CAAE,KAAI;YAC5B,IAAIA,QAAQ,IAAIL,KAAK,IAAI9B,SAAS,EAAE;cAClC,MAAMoC,aAAa,GAAGN,KAAA,CACnBO,MAAM,CAACC,IAAI,IAAIV,eAAe,CAACW,QAAQ,CAACD,IAAI,CAACb,IAAI,CAAC3B,IAAI,CAAC,CAAC;cAE3DoC,EAAE,CAACM,WAAW,CAACJ,aAAa,CAAC;;YAG/B,OAAO,IAAI;UACb,CAAC,EACAK,GAAG,EAAE;QACV,CAAC,CAAC,CACH,CAAC;;KAEL;GACF;EAEDC,oBAAoBA,CAAA;IAClB,OAAO;MACL,WAAW,EAAEC,CAAA,KAAM,IAAI,CAAC1B,MAAM,CAACH,QAAQ,CAACD,YAAY,EAAE;MACtD,aAAa,EAAE+B,CAAA,KAAM,IAAI,CAAC3B,MAAM,CAACH,QAAQ,CAACD,YAAY;KACvD;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}