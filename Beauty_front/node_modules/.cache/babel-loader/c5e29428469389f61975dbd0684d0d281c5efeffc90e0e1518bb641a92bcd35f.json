{"ast":null,"code":"import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\nconst ListItemName = 'listItem';\nconst TextStyleName = 'textStyle';\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nconst inputRegex = /^\\s*([-+*])\\s$/;\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nconst BulletList = Node.create({\n  name: 'bulletList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleBulletList: () => ({\n        commands,\n        chain\n      }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName)).run();\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList()\n    };\n  },\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => {\n          return this.editor.getAttributes(TextStyleName);\n        },\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { BulletList, BulletList as default, inputRegex };","map":{"version":3,"names":["ListItemName","TextStyleName","inputRegex","BulletList","Node","create","name","addOptions","itemTypeName","HTMLAttributes","keepMarks","keepAttributes","group","content","options","parseHTML","tag","renderHTML","mergeAttributes","addCommands","toggleBulletList","commands","chain","toggleList","updateAttributes","editor","getAttributes","run","addKeyboardShortcuts","Mod-Shift-8","addInputRules","inputRule","wrappingInputRule","find","type"],"sources":["../src/bullet-list.ts"],"sourcesContent":["import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nconst ListItemName = 'listItem'\nconst TextStyleName = 'textStyle'\n\nexport interface BulletListOptions {\n  /**\n   * The node name for the list items\n   * @default 'listItem'\n   * @example 'paragraph'\n   */\n  itemTypeName: string,\n\n  /**\n   * HTML attributes to add to the bullet list element\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n\n  /**\n   * Keep the marks when splitting the list\n   * @default false\n   * @example true\n   */\n  keepMarks: boolean,\n\n  /**\n   * Keep the attributes when splitting the list\n   * @default false\n   * @example true\n   */\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nexport const inputRegex = /^\\s*([-+*])\\s$/\n\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'ul' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => { return this.editor.getAttributes(TextStyleName) },\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"],"mappings":";AAEA,MAAMA,YAAY,GAAG,UAAU;AAC/B,MAAMC,aAAa,GAAG,WAAW;AA2CjC;;AAEG;AACI,MAAMC,UAAU,GAAG;AAE1B;;;;;AAKG;AACU,MAAAC,UAAU,GAAGC,IAAI,CAACC,MAAM,CAAoB;EACvDC,IAAI,EAAE,YAAY;EAElBC,UAAUA,CAAA;IACR,OAAO;MACLC,YAAY,EAAE,UAAU;MACxBC,cAAc,EAAE,EAAE;MAClBC,SAAS,EAAE,KAAK;MAChBC,cAAc,EAAE;KACjB;GACF;EAEDC,KAAK,EAAE,YAAY;EAEnBC,OAAOA,CAAA;IACL,OAAO,GAAG,IAAI,CAACC,OAAO,CAACN,YAAY,GAAG;GACvC;EAEDO,SAASA,CAAA;IACP,OAAO,CACL;MAAEC,GAAG,EAAE;IAAI,CAAE,CACd;GACF;EAEDC,UAAUA,CAAC;IAAER;EAAc,CAAE;IAC3B,OAAO,CAAC,IAAI,EAAES,eAAe,CAAC,IAAI,CAACJ,OAAO,CAACL,cAAc,EAAEA,cAAc,CAAC,EAAE,CAAC,CAAC;GAC/E;EAEDU,WAAWA,CAAA;IACT,OAAO;MACLC,gBAAgB,EAAEA,CAAA,KAAM,CAAC;QAAEC,QAAQ;QAAEC;MAAK,CAAE,KAAI;QAC9C,IAAI,IAAI,CAACR,OAAO,CAACH,cAAc,EAAE;UAC/B,OAAOW,KAAK,EAAE,CAACC,UAAU,CAAC,IAAI,CAACjB,IAAI,EAAE,IAAI,CAACQ,OAAO,CAACN,YAAY,EAAE,IAAI,CAACM,OAAO,CAACJ,SAAS,CAAC,CAACc,gBAAgB,CAACxB,YAAY,EAAE,IAAI,CAACyB,MAAM,CAACC,aAAa,CAACzB,aAAa,CAAC,CAAC,CAAC0B,GAAG,EAAE;;QAExK,OAAON,QAAQ,CAACE,UAAU,CAAC,IAAI,CAACjB,IAAI,EAAE,IAAI,CAACQ,OAAO,CAACN,YAAY,EAAE,IAAI,CAACM,OAAO,CAACJ,SAAS,CAAC;;KAE3F;GACF;EAEDkB,oBAAoBA,CAAA;IAClB,OAAO;MACL,aAAa,EAAEC,CAAA,KAAM,IAAI,CAACJ,MAAM,CAACJ,QAAQ,CAACD,gBAAgB;KAC3D;GACF;EAEDU,aAAaA,CAAA;IACX,IAAIC,SAAS,GAAGC,iBAAiB,CAAC;MAChCC,IAAI,EAAE/B,UAAU;MAChBgC,IAAI,EAAE,IAAI,CAACA;IACZ,EAAC;IAEF,IAAI,IAAI,CAACpB,OAAO,CAACJ,SAAS,IAAI,IAAI,CAACI,OAAO,CAACH,cAAc,EAAE;MACzDoB,SAAS,GAAGC,iBAAiB,CAAC;QAC5BC,IAAI,EAAE/B,UAAU;QAChBgC,IAAI,EAAE,IAAI,CAACA,IAAI;QACfxB,SAAS,EAAE,IAAI,CAACI,OAAO,CAACJ,SAAS;QACjCC,cAAc,EAAE,IAAI,CAACG,OAAO,CAACH,cAAc;QAC3Ce,aAAa,EAAEA,CAAA,KAAK;UAAG,OAAO,IAAI,CAACD,MAAM,CAACC,aAAa,CAACzB,aAAa,CAAC;QAAA,CAAE;QACxEwB,MAAM,EAAE,IAAI,CAACA;MACd,EAAC;;IAEJ,OAAO,CACLM,SAAS,CACV;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}