{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, resolveDirective as _resolveDirective, withDirectives as _withDirectives, withKeys as _withKeys } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main-content\"\n};\nconst _hoisted_2 = {\n  class: \"message-page\"\n};\nconst _hoisted_3 = {\n  class: \"chat-list\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"chat-info\"\n};\nconst _hoisted_6 = {\n  class: \"chat-name\"\n};\nconst _hoisted_7 = {\n  class: \"chat-last\"\n};\nconst _hoisted_8 = {\n  key: 0,\n  class: \"chat-window\"\n};\nconst _hoisted_9 = {\n  class: \"chat-header\"\n};\nconst _hoisted_10 = {\n  class: \"chat-body\"\n};\nconst _hoisted_11 = {\n  class: \"chat-content\"\n};\nconst _hoisted_12 = {\n  class: \"chat-time\"\n};\nconst _hoisted_13 = {\n  class: \"chat-input\"\n};\nconst _hoisted_14 = {\n  key: 1,\n  class: \"chat-window\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_avatar = _resolveComponent(\"el-avatar\");\n  const _component_el_badge = _resolveComponent(\"el-badge\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _directive_loading = _resolveDirective(\"loading\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.chatList, chat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: chat.targetId,\n      class: _normalizeClass([\"chat-item\", {\n        active: $setup.activeChat && $setup.activeChat.targetId === chat.targetId\n      }]),\n      onClick: $event => $setup.selectChat(chat)\n    }, [_createVNode(_component_el_avatar, {\n      src: chat.user_pic,\n      size: \"large\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(chat.nickname ? chat.nickname[0] : '?'), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"src\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(chat.nickname), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString(chat.lastMessage), 1 /* TEXT */)]), chat.unReadCount > 0 ? (_openBlock(), _createBlock(_component_el_badge, {\n      key: 0,\n      value: chat.unReadCount\n    }, null, 8 /* PROPS */, [\"value\"])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), $setup.activeChat ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, \" 与 \" + _toDisplayString($setup.activeChat.nickname) + \" 的聊天 \", 1 /* TEXT */), _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, msg => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: msg.message_id,\n      class: _normalizeClass([\"chat-message\", {\n        'me': msg.from_id === _ctx.当前登录用户ID\n      }])\n    }, [_createElementVNode(\"div\", _hoisted_11, _toDisplayString(msg.content), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, _toDisplayString(new Date(msg.created_at).toLocaleString()), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])), [[_directive_loading, $setup.loadingMessages]]), _createElementVNode(\"div\", _hoisted_13, [_createVNode(_component_el_input, {\n    modelValue: $setup.inputMessage,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.inputMessage = $event),\n    placeholder: \"请输入消息\",\n    onKeyup: _withKeys($setup.sendMsg, [\"enter\"])\n  }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: $setup.sendMsg\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\"发送\")])),\n    _: 1 /* STABLE */\n  })])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_14, _cache[2] || (_cache[2] = [_createElementVNode(\"div\", {\n    class: \"chat-placeholder\"\n  }, \"请选择一个聊天\", -1 /* HOISTED */)])))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_Fragment","_renderList","$setup","chatList","chat","targetId","_normalizeClass","active","activeChat","onClick","$event","selectChat","_createVNode","_component_el_avatar","src","user_pic","size","default","_withCtx","_createTextVNode","_toDisplayString","nickname","_","_hoisted_5","_hoisted_6","_hoisted_7","lastMessage","unReadCount","_createBlock","_component_el_badge","value","_createCommentVNode","_hoisted_4","_hoisted_8","_hoisted_9","_hoisted_10","messages","msg","message_id","from_id","_ctx","当前登录用户ID","_hoisted_11","content","_hoisted_12","Date","created_at","toLocaleString","loadingMessages","_hoisted_13","_component_el_input","modelValue","inputMessage","_cache","placeholder","onKeyup","_withKeys","sendMsg","_component_el_button","type","_hoisted_14"],"sources":["C:\\Users\\32561\\Desktop\\毕设仓库\\beauty-front\\src\\views\\Mine\\MyMessage.vue"],"sourcesContent":["<script setup>\r\nimport {ref, onMounted, watch} from 'vue'\r\nimport {ElMessage} from 'element-plus'\r\nimport {getChatList, getHistory, sendMessage, setMessageRead} from '@/api/prMessage'\r\nimport {userOtherInfoService} from '@/api/user'\r\n\r\nconst chatList = ref([])\r\nconst activeChat = ref(null)\r\nconst messages = ref([])\r\nconst inputMessage = ref('')\r\nconst pageNum = ref(1)\r\nconst pageSize = ref(20)\r\nconst loadingMessages = ref(false)\r\n\r\nconst fetchChatList = async () => {\r\n  try {\r\n    const res = await getChatList()\r\n    if (res.data.code === 200) {\r\n      const tempList = res.data.data || []\r\n      for (const item of tempList) {\r\n        try {\r\n          const userInfoRes = await userOtherInfoService(item.targetId)\r\n          if (userInfoRes.data.code === 200) {\r\n            item.nickname = userInfoRes.data.data.nickname\r\n            item.user_pic = userInfoRes.data.data.user_pic\r\n          } else {\r\n            item.nickname = '未知用户'\r\n            item.user_pic = ''\r\n          }\r\n        } catch (e) {\r\n          item.nickname = '未知用户'\r\n          item.user_pic = ''\r\n        }\r\n      }\r\n      chatList.value = tempList\r\n    }\r\n  } catch (err) {\r\n    ElMessage.error('获取聊天列表失败')\r\n  }\r\n}\r\n\r\nconst fetchMessages = async () => {\r\n  if (!activeChat.value) return\r\n  loadingMessages.value = true\r\n  try {\r\n    const res = await getHistory({\r\n      pageNum: pageNum.value,\r\n      pageSize: pageSize.value,\r\n      target_id: activeChat.value.targetId\r\n    })\r\n    if (res.data.code === 200) {\r\n      messages.value = res.data.data || []\r\n    }\r\n  } catch (err) {\r\n    ElMessage.error('获取消息失败')\r\n  } finally {\r\n    loadingMessages.value = false\r\n  }\r\n}\r\n\r\nconst selectChat = async (chat) => {\r\n  activeChat.value = chat\r\n  pageNum.value = 1\r\n  await fetchMessages()\r\n  await setMessageRead(chat.targetId)\r\n}\r\n\r\nconst sendMsg = async () => {\r\n  if (!inputMessage.value.trim() || !activeChat.value) return\r\n  try {\r\n    await sendMessage({\r\n      from_id: 当前登录用户ID,  // TODO:换成你的实际登录用户id\r\n      to_id: activeChat.value.targetId,\r\n      content: inputMessage.value.trim()\r\n    })\r\n    inputMessage.value = ''\r\n    await fetchMessages()\r\n  } catch (err) {\r\n    ElMessage.error('发送失败')\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  fetchChatList()\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"main-content\">\r\n    <div class=\"message-page\">\r\n      <div class=\"chat-list\">\r\n        <div\r\n            v-for=\"chat in chatList\"\r\n            :key=\"chat.targetId\"\r\n            class=\"chat-item\"\r\n            :class=\"{ active: activeChat && activeChat.targetId === chat.targetId }\"\r\n            @click=\"selectChat(chat)\"\r\n        >\r\n          <el-avatar :src=\"chat.user_pic\" size=\"large\">{{ chat.nickname ? chat.nickname[0] : '?' }}</el-avatar>\r\n          <div class=\"chat-info\">\r\n            <div class=\"chat-name\">{{ chat.nickname }}</div>\r\n            <div class=\"chat-last\">{{ chat.lastMessage }}</div>\r\n          </div>\r\n          <el-badge :value=\"chat.unReadCount\" v-if=\"chat.unReadCount > 0\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"chat-window\" v-if=\"activeChat\">\r\n        <div class=\"chat-header\">\r\n          与 {{ activeChat.nickname }} 的聊天\r\n        </div>\r\n\r\n        <div class=\"chat-body\" v-loading=\"loadingMessages\">\r\n          <div v-for=\"msg in messages\" :key=\"msg.message_id\" class=\"chat-message\"\r\n               :class=\"{ 'me': msg.from_id === 当前登录用户ID }\">\r\n            <div class=\"chat-content\">{{ msg.content }}</div>\r\n            <div class=\"chat-time\">{{ new Date(msg.created_at).toLocaleString() }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"chat-input\">\r\n          <el-input\r\n              v-model=\"inputMessage\"\r\n              placeholder=\"请输入消息\"\r\n              @keyup.enter=\"sendMsg\"\r\n          />\r\n          <el-button type=\"primary\" @click=\"sendMsg\">发送</el-button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"chat-window\" v-else>\r\n        <div class=\"chat-placeholder\">请选择一个聊天</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.main-content {\r\n  flex: 1;\r\n  width: 1720px;\r\n  height: 800px;\r\n  margin: 0 auto;\r\n  margin-bottom: 10px;\r\n  background: #f5f7fa;\r\n  padding: 20px;\r\n}\r\n.message-page {\r\n  display: flex;\r\n  height: 90vh;\r\n  background: #f5f7fa;\r\n}\r\n\r\n.chat-list {\r\n  width: 300px;\r\n  background: white;\r\n  border-right: 1px solid #ddd;\r\n  overflow-y: auto;\r\n}\r\n\r\n.chat-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  cursor: pointer;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.chat-item.active {\r\n  background: #e6f7ff;\r\n}\r\n\r\n.chat-info {\r\n  margin-left: 10px;\r\n  flex: 1;\r\n}\r\n\r\n.chat-name {\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.chat-last {\r\n  color: #999;\r\n  font-size: 12px;\r\n}\r\n\r\n.chat-window {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-header {\r\n  background: white;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #ddd;\r\n  font-weight: bold;\r\n}\r\n\r\n.chat-body {\r\n  flex: 1;\r\n  padding: 15px;\r\n  overflow-y: auto;\r\n  background: #f9f9f9;\r\n}\r\n\r\n.chat-message {\r\n  margin-bottom: 10px;\r\n  max-width: 60%;\r\n  word-break: break-word;\r\n}\r\n\r\n.chat-message.me {\r\n  margin-left: auto;\r\n  text-align: right;\r\n}\r\n\r\n.chat-content {\r\n  display: inline-block;\r\n  background: #409eff;\r\n  color: white;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.chat-message.me .chat-content {\r\n  background: #67c23a;\r\n}\r\n\r\n.chat-time {\r\n  font-size: 10px;\r\n  color: #999;\r\n  margin-top: 5px;\r\n}\r\n\r\n.chat-input {\r\n  display: flex;\r\n  padding: 15px;\r\n  background: white;\r\n  border-top: 1px solid #ddd;\r\n}\r\n\r\n.chat-placeholder {\r\n  margin: auto;\r\n  font-size: 20px;\r\n  color: #ccc;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}